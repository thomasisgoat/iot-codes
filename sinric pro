#ifdef ENABLE_DEBUG
#define DEBUG_ESP_PORT Serial
#define NODEBUG_WEBSOCKETS
#define NDEBUG
#endif

#include <Arduino.h>
//#include <ESP8266WiFi.h>
#include <WiFi.h>
#include "SinricPro.h"
#include "SinricProSwitch.h"

#include <map>
#define WIFI_SSID "messi"
#define WIFI_PASS "ronaldo7"
#define APP_KEY "06b9e3dc-d158-43cb-9997-da64c5a88dde"
//Should look like "de0bxxxx-1x3x-4x3x-ax2x-5dabxxxxxxxx"
#define APP_SECRET "9775abff-5023-4598-980b-ddffc34b76e1-d095eabb-a0cb-420f-a4e4-b5ac6e3f3333"
// Should look like"5f36xxxx-x3x7-4x3x-xexe-e86724a9xxxx-4c4axxxx-3x3x-x5xe-x9x3-333d65xxxxxx"

//Enter the device IDs here
#define device_ID_1 "67135b1654041e4ff651cde3"
//#define device_ID_2 "64c35c6e2ac6a1822a952e50"
//#define device_ID_3 "64c35c8a35be2dbc3eda2516"

// define the GPIO connected with Relays and switches
#define RelayPin1 2 //D1
//#define RelayPin2 4 //D2
//#define RelayPin3 12 //D3

//#define wifiLed 16 //D0

#define BAUD_RATE 9600

#define DEBOUNCE_TIME 250

typedef struct
{ // struct for the std::map below
int relayPIN;
} deviceConfig_t;
// this is the main configuration
// please put in your deviceId, the PIN for Relay and PIN for flipSwitch
// this can be up to N devices...depending on how much pin's available on your device ;)
// right now we have 3 devicesIds going to 3 relays
std::map<String, deviceConfig_t> devices =
{
{device_ID_1, { RelayPin1 }},
// {device_ID_2, { RelayPin2 }},
// {device_ID_3, { RelayPin3 }},
};

void setupRelays() {
for (auto &device : devices) 
{ // for each device (relay,flipSwitch combination)
int relayPIN = device.second.relayPIN;
// get the relay pin
pinMode(relayPIN, OUTPUT);
// set relay pin to OUTPUT
digitalWrite(relayPIN, LOW);
}
}

bool onPowerState(String deviceId, bool &state)
{
Serial.printf("%s: %s\r\n", deviceId.c_str(), state ? "on" : "off");
int relayPIN = devices[deviceId].relayPIN;
// get the relay pin for corresponding device
digitalWrite(relayPIN, !state); 
// set the new relay state
return true;
}

void setupWiFi()
{
Serial.printf("\r\n[Wifi]: Connecting");
WiFi.begin(WIFI_SSID, WIFI_PASS);

while (WiFi.status() != WL_CONNECTED)
{
Serial.printf(".");
delay(250);
}
// digitalWrite(wifiLed, LOW);
Serial.printf("connected!\r\n[WiFi]: IP-Address is %s\r\n",
WiFi.localIP().toString().c_str());
}

void setupSinricPro()
{
for (auto &device : devices)
{
const char *deviceId = device.first.c_str();
SinricProSwitch &mySwitch = SinricPro[deviceId];
mySwitch.onPowerState(onPowerState);
}
SinricPro.begin(APP_KEY, APP_SECRET);
SinricPro.restoreDeviceStates(true);
}

void setup()
{
Serial.begin(BAUD_RATE);

// pinMode(wifiLed, OUTPUT);
// digitalWrite(wifiLed, HIGH);

setupRelays();
setupWiFi();
setupSinricPro();
}

void loop()
{
SinricPro.handle();
}
